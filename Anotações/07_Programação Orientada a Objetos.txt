Orientação a Objetos - Professor (Thiago Leite)

Por que usar?
- Paradigma estruturado: tem uma representação mais simplista (C++). Mecanismos e conceitos mais limitados para trabalhar. Foca em funções e dados.Foca no como fazer.

- Paradigma Orientado a Objeto tem uma representação mais realista. Apresenta de forma mais realista os conceitos do mundo real. Foca na modelagem e na interação entre dados (nível de abstração maior). Foca no que fazer (o que é o problema que queremos resolver).
Vantagens:
Melhor coesão
Melhor acoplamento (flexíveis)
Diminuição de gap semântico (diferença de representação, relação mais clara e objetiva)
Coletor de lixo (limpam a memória do computador - menos propício a erro e travamento de software)

funções e procedimentos <-- programação estruturada --> dados

objeto->objeto->programação orientada a objetos -> objeto-> objeto

===== Fundamentos ======

A orientação a objetos é um paradigma de análise, projeto e programação de sistemas de software baseado na composição e interação entre diversas unidades de software chamadas de objetos.

- Abstração: processo pelo qual se isolam características de um objeto (essenciais e não acidentais), considerando os que tenham em comum certos grupos de objetos.

- Reuso: capacidade de criar novas unidades de código a partir de outras já existentes (vários mecanismos e em mais alto nível).

- Encapsulamento: capacidade de esconder complexidades e proteger dados.

====== ESTRUTURA ======
- Classe: é uma estrutura que abstrai um conjunto de objetos com características similares. Uma classe define o comportamento de seus objetos através de métodos e os estados possíveis destes objetos através de atributos. Em outros termos, uma classe descreve os serviços providos por seus objetos e quais informações eles podem armazenas.
Como um molde.
Exemplos: bola, carro, venda, viagem, comprador, computador

Dicas
-substantivos (concretos ou abstratos);
-nomes significativos;
-contexto deve ser considerado.

Códigos
- Java
class Carro {
	}
- C# (c sharp)
class Carro {
	}

- Python
class Carro:
	pass

==========
- Atributo: é o elemento de uma classe responsável por definir sua estrutura de dados. O conjunto destes será responsável por representar suas características e fará parte dos objetos criados a partor da classe.
O conceito do mundo real que queremos representar num objeto (classe).
Atributo: o que é próprio e peculiar a alguén ou a alguma coisa.
Variável: sujeito a variações ou mudanças, que pode variar, inconstante, instável.
Dicas
-substantivos e adjetivos;
-nomes significativos;
-contexto deve ser considerado;
-abstração;
-tipos adequados.

Códigos
- Java
class Carro {
	int portas;
	}
- C# (c sharp)
class Carro {
	int portas;
	}

- Python
class Carro:
	portas = 0

==========
- Método: é uma porção de código (sub-rotina) que é disponibilizada pela classe. Este é executado quando é feita uma requisição a ele. Um método serve para identificar quais serviços, ações, que a classe oferece. Eles são responsáveis por definir e realizar um determinado comportamento.

Criação
Java e C#
-Visibilidade
-Retorno
-Nome
-Parâmetros

Python
-def
-Nome
-Parâmetros

Dicas
-verbos
-nomes significativos
-contexto deve ser considerado

Códigos
- Java e C#
class Carro {
	void frear (){
		}
	}

- Python
class Carro:
	def frear()

Dois métodos especiais
Construtor: constroi objetos a partir das classes, provem valores iniciais aos atributos
Códigos
- Java e C#
class Carro {
	Carro(){
		}
	}

- Python
class Carro:
	def __init__(self)

Destrutor: auxilia a destruição do objeto (coletor de lixo - verifica o destrutor). Boa prática para liberar recursos (ex. portas seriais)
Códigos
- Java 
class Carro {
	void finalize(){
		}
	}
- C# 
class Carro {
	~Carro(){
		}
	}

- Python
class Carro:
	def __del__(self)

Sobrecarga: mudar a assinatura de acordo com a necessidade (assinatura: nome+parâmetros).
Java
m1()
m1(int i)
m1(float f)
m1(String s, long l)
m1(long l, string s)

C#
M1()
M1(int i)
M1(float f)
M1(String s, long l)
M1(long l, string s)

Python: não é possível realizar esta operação

Por que usar sobrecarga? Representar de forma mais fidedigna a ação real (manter a abstração alvo e facilitar o entendimento do software).

==========
Objeto: representação de um conceito/entidade do mundo real, que pode ser física ou conceitual e possui um significado bem definido para um determinado software. Para esse conceito/entidade, deve ser definida inicialmente uma classe (molde, estático) a partir da qual posteriormente setão instanciados objetos distintos. Realmente executa e "faz as coisas acontecerem".

Criação
Java e C#
Carro carro = new Carro ();

Python
carro = Carro ()


==========
Mensagem: processo de ativação de um método de um objeto. Isto ocorre quando uma requisição (chamada) a esse método é realizada, assim disparando a execução de seu comportamento descrito por sua classe. Pode também ser direcionada diretamente à classe, caso a requisição seja a um método estático.

Criação
Java e C#
Carro carro = new Carro ();
carro.<método>;

Carro.<método>;

Python
carro = Carro ()
carro.<método>

Carro.<método>

Conceitos avançados
-instânciaxestático: atributos e métodos
-estado de um objeto
-identidade de um objeto
-representação numérica de um objeto
-representação padrão de um objeto